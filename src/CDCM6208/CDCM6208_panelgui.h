#ifndef __CDCM6208_panelgui__
#define __CDCM6208_panelgui__

/**
@file
Subclass of MyPanel5, which is generated by wxFormBuilder.
*/

#include <iostream>
#include <vector>
#include "CDCM6208_wxgui.h"
#include "lime/LimeSuite.h"
//// end generated include

struct Fractional_config {
  bool fractional;
  int prescaler;
  int integer_part;
  int fractional_part;
} ;

struct VCO_config {
   int Prescaler;
   int Multiplier;
   int Divisor;
   double Frequency;
   double freq_error;
   bool valid=true;
} ;

struct Frequency_plan {
   double Input_Frequency;
   double Y0Y1_Frequency;
   double Y2Y3_Frequency;
   double Y4_Frequency  ;
   double Y5_Frequency  ;
   double Y6_Frequency  ;
   double Y7_Frequency  ;
   uint8_t int_care_mask;
} ;

/** Implementing MyPanel5 */
class CDCM6208_panelgui : public CDCM_controlpanel
{


	public:
		/** Constructor */
	CDCM6208_panelgui( wxWindow* parent );
	//// end generated class members
   CDCM6208_panelgui( wxWindow* parent, wxWindowID id, const wxPoint& pos, const wxSize& size, long style);
   void Initialize(lms_device_t* pControl);
   void UpdateGUI();

   double PrimaryF=30.72*1e6;
   double SecondaryF=30.72*1e6;
   int RDivider=1;
   int InMux=1;
   int MDivider=1;
   double VCOF=3072*1e6;
   int PrescalerA=4;
   int PrescalerB=4;
   int NMultiplier0=5; //8bit
   int NMultiplier1=5; //10bit
   double VCO_MIN=2940*1e6;
   double VCO_MAX=3130*1e6;
   int CDCM_VER=1;
   int Y0Y1_Divider=25;
   int Y2Y3_Divider=25;
   double Y4_Divider=25;
   Fractional_config Y4;
   double Y5_Divider=25;
   Fractional_config Y5;
   double Y6_Divider=25;
   Fractional_config Y6;
   double Y7_Divider=25;
   Fractional_config Y7;
   double Y0Y1_Frequency=30.72*1e6;
   double Y2Y3_Frequency=30.72*1e6;
   double Y2_Frequency=30.72*1e6;
   double Y3_Frequency=30.72*1e6;
   double Y4_Frequency=30.72*1e6;
   double Y5_Frequency=30.72*1e6;
   double Y6_Frequency=30.72*1e6;
   double Y7_Frequency=30.72*1e6;
   uint8_t int_care_mask=0x3d;//all enabled except y2y3
   bool lock_status=true;
   int SPI_BASEADDR=288;
protected:

   lms_device_t* lmsControl;
   // // Virtual event handlers, override them in your derived class
   void OnChange( wxCommandEvent& event )override;
   void OnRadio( wxCommandEvent& event )override;
   void OnChoice( wxCommandEvent& event )override;
   void OnFreqEntry( wxCommandEvent& event )override;
   void OnButton( wxCommandEvent& event )override;
   void onFP_chk( wxCommandEvent& event );
   // Other functions
   void Recalculate();
   // Finds a combination for getting desired N integer divider
   int SolveN(int* Target, int* Mult8bit, int* Mult10bit);
   // Find a configuration to implement requested target fractional divider
   void SolveFracDiv(double* target, Fractional_config* config, double* result);
   // Calculate fractional divider value from configuration structure
   void CalculateFracDiv(double* target, Fractional_config* config);
   // Find a VCO config for specified frequency plan
   VCO_config SolveFreqPlanSingleCDCM(Frequency_plan Frequency_plan,  double VCOmin, double VCOmax);
   // Find valid VCO freqs with specified lcm value
   std::vector<VCO_config> FindValidVCOFreqs(double lcm, double VCOmin, double VCOmax);
   // Check if float has no fractional part
   bool isInteger(double var);
   // Find Greatest common denominator
   uint64_t findGCD(uint64_t a, uint64_t b);
   // convert decimal fraction (double) to num/den format fraction,
   // truncate if needed
   double dec2frac(double target, int* num, int* den);
   // return index of VCO config with lowest multiplier
   int findlownum(std::vector<VCO_config> &input);
   // return index of best vco config
   int findbestconfig(std::vector<VCO_config> &input, int have_error);
   // return index of VCO config with lowest error
   int findlowerr(std::vector<VCO_config> &input);
   
};

#endif // __CDCM6208_panelgui__
